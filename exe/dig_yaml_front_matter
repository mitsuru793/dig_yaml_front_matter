#!/usr/bin/env ruby
require 'thor'
require 'front_matter_parser'
require 'awesome_print'
require 'dig_yaml_front_matter'

class Command < Thor
  using DigYamlFrontMatter
  desc 'ls', 'list file path filtering with item of yaml front matter'
  option :path, :default => './*.md'
  option :include_any, :aliases => '-i', :type => :array
  option :exclude_any, :aliases => '-e', :type => :array
  option :include_all, :aliases => '-I', :type => :array
  option :exclude_all, :aliases => '-E', :type => :array
  option :property,    :aliases => '-p', :type => :string
  option :unique,      :aliases => '-u', :type => :boolean
  def ls
    front_matter_values = []
    digger = DigYamlFrontMatter::Digger.new
    digger.dig(options['path']) do |path, parsed|
      next unless filter_pass?(parsed, options)
      if options['property']
        value = parsed.front_matter.fetch(options['property'], '')
        front_matter_values << value
      else
        puts path
      end
    end
    puts_property(front_matter_values, options['unique']) if options['property']
  end

  desc 'count', 'display number of the files each date'
  option :path, :default => './*.md'
  option :each, :aliases => '-e', :type => :string
  option :average, :aliases => '-a', :type => :boolean
  def count
    digger = DigYamlFrontMatter::Digger.new
    counts = []
    digger.dig(options['path']) do |path, parsed|
      date_re = /^\d{4}-\d{2}-\d{2}/
      date_format = '%Y-%m-%d'

      file_name = File.basename(path, '.*')
      date_str = file_name.match(date_re)[0]
      date = DateTime.strptime(date_str, date_format)
      wday = date.wday

     counts << {date: date_str, wday: wday}
    end

    case options['each']
    when 'day'
      day_sum = 0 if options['average']
      days = counts.map {|c| c[:date].match(/\d{4}-\d{2}-\d{2}/)[0]}.uniq
      days.each do |day|
        day_count = counts.select {|c| c[:date].match(day)}.length
        if options['average']
          day_sum += day_count
        else
          printf("%s %s [%d]", day, wday_str_from_date_str(day), day_count)
          puts
        end
      end
      puts day_sum * 1.0 / days.length if options['average']
    when 'month'
      month_sum = 0 if options['average']
      months = counts.map {|c| c[:date].match(/\d{4}-\d{2}/)[0]}.uniq
      months.each do |month|
        month_count = counts.select {|c| c[:date].match(month)}.length
        if options['average']
          month_sum += month_count
        else
          printf("%s [%d]", month, month_count)
          puts
        end
      end
      puts month_sum * 1.0 / months.length if options['average']
    when 'year'
      year_sum = 0 if options['average']
      years = counts.map {|c| c[:date].match(/\d{4}/)[0]}.uniq
      years.each do |year|
        year_count = counts.select {|c| c[:date].match(year)}.length
        if options['average']
          year_sum += year_count
        else
          printf("%s [%d]", year, year_count)
          puts
        end
      end
      puts year_sum * 1.0 / years.length if options['average']
    when 'wday'
      wday_sum = 0 if options['average']
      [*0..6].each do |wday|
        wday_count = counts.select {|c| c[:wday] == wday}.length
        if options['average']
          wday_sum += wday_count
        else
          next if wday_count < 1
          printf("%s [%d]", wday_to_s(wday), wday_count)
          puts
        end
      end
      puts wday_sum / 7.0 if options['average']
    end
  end

  private
  def wday_str_from_date_str(date_str)
    date_format = '%Y-%m-%d'
    date = DateTime.strptime(date_str, date_format)
    wday_to_s(date.wday)
  end

  def wday_to_s(wday)
    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][wday]
  end

  def filter_pass?(parsed, options)
    is_pass = false
    filter_modes = ['include_any', 'exclude_any', 'include_all', 'exclude_all']
    filter_modes.each do |mode|
      if options[mode] and options[mode].size < 2
        puts "#{mode} option requires arguments more than 2."
        exit
      elsif options[mode] and options[mode].size > 1
        item_name = options[mode][0]
        next unless parsed.front_matter.has_key?(item_name)
        case mode
        when 'include_any'
          is_pass = parsed.include_any?(item_name => options[mode][1..-1])
        when 'exclude_any'
          is_pass = !parsed.include_any?(item_name => options[mode][1..-1])
        when 'include_all'
          is_pass = parsed.include_all?(item_name => options[mode][1..-1])
        when 'exclude_all'
          is_pass = !parsed.include_all?(item_name => options[mode][1..-1])
        end
        break unless is_pass
      end
    end
    is_pass = true if filter_modes.all? { |m| options[m].nil? }
    is_pass
  end

  def puts_property(values, is_unique=false)
    values = values.flatten.uniq.sort if is_unique
    values.each do |value|
      if is_unique
        puts value
      else
        if value.is_a?(Array)
          printf("%s", value)
          puts
        else
          puts value
        end
      end
    end
  end
end


Command.start(ARGV)
